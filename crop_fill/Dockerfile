# Generated by: Neurodocker version 0.7.0+15.ga4940e3.dirty
# Latest release: Neurodocker version 0.7.0
# 
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
# 
#     https://github.com/ReproNim/neurodocker
# 
# Timestamp: 2021/10/19 19:15:20 UTC
FROM ubuntu:18.04

USER root

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker

ENTRYPOINT ["/neurodocker/startup.sh"]

RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           tcsh \
           bc \
           tar \
           libgomp1 \
           perl-modules \
           wget \
           curl \
           libsm-dev \
           libx11-dev \
           libxt-dev \
           libxext-dev \
           libglu1-mesa \
           libpython2.7-stdlib \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

#ENV FREESURFER_HOME="/opt/freesurfer" \
#    PATH="/opt/freesurfer/bin:$PATH"
#RUN apt-get update -qq \
#    && apt-get install -y -q --no-install-recommends \
#           bc \
#           libgomp1 \
#           libxmu6 \
#           libxt6 \
#           perl \
#           tcsh \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/* \
#    && echo "Downloading FreeSurfer ..." \

ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py38_4.12.0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda update -yq -nbase conda \
    && conda config --system --prepend channels conda-forge \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    && sync && conda clean -y --all && sync \
#    && conda install -y -q --name base \
#           "python=3.8.11" \
    && conda install -c anaconda -y python=3.8.11 \
    && conda install -y -q --name base \
           "pip" \
           "pandas" \
           "setuptools" \
           "nibabel" \
           "scikit-image" \
#             "os" \
#             "numpy" \
#             "argparse" \
#             "glob"" \
    && sync && conda clean -y --all && sync \
#    && bash -c "source activate base \
#    && pip install --no-cache-dir  \
#             "nibabel" \
#             "os" \
#             "numpy" \
#             "argparse" \
#             "glob"" \
    && rm -rf ~/.cache/pip/* \
    && sync

RUN bash -c 'curl -sL https://deb.nodesource.com/setup_18.x | bash -'

RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN bash -c 'npm install -g bids-validator@0.19.8'

ENV FSLDIR="/usr/share/fsl/5.0" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    POSSUMDIR="/usr/share/fsl/5.0" \
    LD_LIBRARY_PATH="/usr/lib/fsl/5.0:" \
    FSLTCLSH="/usr/bin/tclsh" \
    FSLWISH="/usr/bin/wish"

RUN mkdir root/matlab && touch root/matlab/startup.m

RUN mkdir /scratch

RUN mkdir /local-scratch

COPY ["run.py", "/run.py"]

RUN chmod +x /run.py

COPY ["Cropping.py", "/Cropping.py"]

ENTRYPOINT ["/neurodocker/startup.sh", "/run.py"]

RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "ubuntu:xenial" \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "tcsh", \
    \n        "bc", \
    \n        "tar", \
    \n        "libgomp1", \
    \n        "perl-modules", \
    \n        "wget", \
    \n        "curl", \
    \n        "libsm-dev", \
    \n        "libx11-dev", \
    \n        "libxt-dev", \
    \n        "libxext-dev", \
    \n        "libglu1-mesa", \
    \n        "libpython2.7-stdlib" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "miniconda", \
    \n      { \
    \n        "use_env": "base", \
    \n        "conda_install": [ \
    \n          "python=3", \
    \n          "pip", \
    \n          "pandas", \
    \n          "setuptools", \
    \n          "pandas=0.21.0" \
    \n        ], \
    \n        "pip_install": [ \
    \n          "nibabel" \
    \n        ] \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "curl -sL https://deb.nodesource.com/setup_18.x | bash -" \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "nodejs" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "npm install -g bids-validator@0.19.8" \
    \n    ], \
    \n    [ \
    \n      "env", \
    \n      { \
    \n        "FSLDIR": "/usr/share/fsl/5.0", \
    \n        "FSLOUTPUTTYPE": "NIFTI_GZ", \
    \n        "FSLMULTIFILEQUIT": "TRUE", \
    \n        "POSSUMDIR": "/usr/share/fsl/5.0", \
    \n        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:", \
    \n        "FSLTCLSH": "/usr/bin/tclsh", \
    \n        "FSLWISH": "/usr/bin/wish" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "run", \
    \n      "mkdir root/matlab && touch root/matlab/startup.m" \
    \n    ], \
    \n    [ \
    \n      "run", \
    \n      "mkdir /scratch" \
    \n    ], \
    \n    [ \
    \n      "run", \
    \n      "mkdir /local-scratch" \
    \n    ], \
    \n    [ \
    \n      "copy", \
    \n      [ \
    \n        "run.py", \
    \n        "/run.py" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "run", \
    \n      "chmod +x /run.py" \
    \n    ], \
    \n    [ \
    \n      "copy", \
    \n      [ \
    \n        "version", \
    \n        "/version" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "entrypoint", \
    \n      "/neurodocker/startup.sh /run.py" \
    \n    ] \
    \n  ] \
    \n}' > /neurodocker/neurodocker_specs.json
